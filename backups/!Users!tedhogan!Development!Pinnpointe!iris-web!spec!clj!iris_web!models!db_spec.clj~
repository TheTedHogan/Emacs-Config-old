(ns iris-web.models.db_spec
  (:require
   [speclj.core :refer :all]
   [iris-web.models.db :as db]
   [iris-web.utility :refer [get-pool install-fixture db-fixture]]))

(defn setup []
  [(before-all
    (db/setup-db (get-pool)))
   (before
    (install-fixture))])

(defn upc-fixture-filter [fixture-table fixture-field fixture-key id]
  (fn [upc] 
    (some #{upc} (->> (fixture-table db-fixture)
                      (filter #(= (fixture-field %) id))
                      (map #(fixture-key %))))))

(describe "transactions"
          (setup)
               
          (it "rolls back when instructed"
              (db/in-transaction
               (fn []
                 (db/set-rollback)
                 (db/insert! :regions {:name "Test"})))
              (should-be empty? (db/query "select * from regions where name='Test'")))
          (it "commits by default"
              (db/in-transaction
               (fn []
                 (db/insert! :regions {:name "Test"})))
              (should-not-be empty? (db/query "select * from regions where name='Test'"))))

(describe "fetch-items"
          (setup)          

          (it "returns all items by default"
              (should= (count (:items db-fixture)) (count (db/fetch-items))))

          (it "filters by manufacturer"
              (doseq [m [194 2]]
                (let [items (db/fetch-items {:manufacturer m})]
                  (should-not-be empty? items)
                  (should (every? #(= (:manufacturer %) m) items)))))
          
          (it "filters by active"
              (doseq [a [true false]]
                (let [items (db/fetch-items {:active a})]
                  (should-not-be empty? items)
                  (should (every? #(= (:active %) a) items))))))

(describe "fetch-authorizations"
          (setup)

          (it "returns all authorizations by default"
              (should= (count (db/fetch-authorizations)) (count (:authorizations db-fixture))))

          (it "filters by manufacturer"
              (doseq [m [194 2]]
                (let [authorizations (db/fetch-authorizations {:manufacturer m})]
                  (should-not-be empty? authorizations)
                  (should (every? (upc-fixture-filter :items :manufacturer :upc m)
                                  (map  #(:upc %) authorizations))))))

          (it "filters by department"
              (doseq [d [1 4]]
                (let [authorizations (db/fetch-authorizations {:department d})]
                  (should-not-be empty? authorizations)
                  (should (every? (upc-fixture-filter :items :department :upc d)
                                  (map #(:upc %) authorizations))))))

          (it "filters by CustomerDivision"
              (doseq [d [1 2]]
                (let [authorizations (db/fetch-authorizations {:division d})]
                  (should-not-be empty? authorizations)
                  (should (every? (upc-fixture-filter :customerdivisions :id :id d)
                                  (map #(:division %) authorizations))))))

          (it "filters by category"
              (doseq [c [1 2]]
                (let [authorizations (db/fetch-authorizations {:category c})]
                  (should-not-be empty? authorizations)
                  (should (every? (upc-fixture-filter :items :category :upc c)
                                  (map #(:upc %) authorizations))))))
          (it "filters by item"
              (doseq [upc ["123" "456" "789"]]
                 (should (= (db/fetch-authorizations {:upc upc})
                            (filter #(= (:upc %) upc) (:authorizations db-fixture)))))))

(describe "get-departments"
          (setup)

          (it "returns all departments by default"
              (should= (count (:departments db-fixture)) (count (db/get-departments)))))

(describe "delete-item"
          (setup)

          (it "returns false when the item does not exist"
              (should-not (db/delete-item "noexist")))
          
          (it "returns true and deletes item"
              (should (db/delete-item "321"))
              (should-be-nil (db/fetch-upc "321")))
          
          (it "throws exception when deleting item with authorizations"
              (should-throw (db/delete-item "123"))))



(def example-item {:upc "new" :description "test-item"
                   :manufacturer 194 :department 1
                   :category 1})

(describe "create-item"
          (setup)

          (it "returns true and creates item"
              (should (db/create-item example-item))
              (should-not-be-nil (db/fetch-upc (:upc example-item))))

          (it "passes the exception when creation fails"
              (should-throw (db/create-item (assoc :upc 123 example-item)))))

(run-specs)
